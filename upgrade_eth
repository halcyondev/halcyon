# currencies.se -- Ethereum contract
#
# Copyright (c) 2014 Halcyoncoin_market
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

#
# Markets
#

# Slot allocation:
# n + 0: Name
# n + 1: Contract
# n + 2: Decimal precision
# n + 3: Minimum total
# n + 4: Price denominator
# n + 5: Last price
# n + 6: Market ID
# n + 7: Block #
# n + 8: Previous market pointer
# n + 9: Next market pointer

init:
    # c3D definitions
    contract.storage[10] = 0x88554646BA # c3D linked list
    contract.storage[15] = msg.sender # Owner of this c3D contract
    contract.storage[16] = msg.sender # Creator of this c3D contract
    contract.storage[17] = block.timestamp # TimeStamp this c3D contract was created

code:
    # Basic gas check
    if tx.gas < 1000:
        return(0) // "Insufficient gas"

    # Get our status
    status = contract.storage[1]

    # Get reference to exchange
    exchange = contract.storage[15]

    # Logging
    contract.storage[20] = msg.datasize
    contract.storage[21] = tx.gas
    contract.storage[22] = block.timestamp

    # Get the total number of active markets
    total = contract.storage[2]

    # Get our linked list start
    start = contract.storage[18]

    # Get our last recorded pointer
    last = contract.storage[19]

    # Slots used per data group
    slots = 10
    used = 6 # Current number of slots used

    if msg.value > 0: // "Refunding excess value: %s" % msg.value
        send(msg.sender, msg.value)

    if status == 1:
        #
        # Get market
        #
        if msg.datasize == 1:
            marketid = msg.data[0] - 1
            market = array(used)
            slot = marketid * slots + start
            market[0] = contract.storage[slot] // "Name"
            market[1] = contract.storage[slot + 1] // "Contract"
            market[2] = contract.storage[slot + 2] // "Decimal precision"
            market[3] = contract.storage[slot + 3] // "Minimum total"
            market[4] = contract.storage[slot + 4] // "Price denominator"
            market[5] = contract.storage[slot + 5] // "Last price"
            return(market, used)

        #
        # Get last price
        #
        if msg.data[0] == "price" and msg.datasize == 2:
            marketid = msg.data[1] - 1
            slot = marketid * slots + start + 5
            if marketid > total or slot > last + slots:
                return(0)
            price = contract.storage[slot]
            return(price)

        #
        # Add market
        #
        elif msg.datasize == used:
            if msg.data[0] == 1:
                if msg.sender == exchange:
                    lastid = contract.storage[3]
                    name = msg.data[1]
                    contract = msg.data[2]
                    decimals = msg.data[3]
                    minimum = msg.data[4]
                    denominator = msg.data[5]
                    market = lastid + 1

                    # Save last registered Market ID
                    contract.storage[9] = market

                    if !name:
                        return(0) // "Invalid name"
                    if !contract or contract > 2^254:
                        return(0) // "Invalid contract"
                    if decimals > 2^254:
                        return(0) // "Invalid decimal precision"
                    if !minimum or minimum > 2^254:
                        return(0) // "Invalid minimum amount"
                    if !denominator or denominator > 2^254:
                        return(0) // "Invalid price denominator"
                    if !market or market > 2^254:
                        return(0) // "Invalid market ID"

                    # Find our next available slots
                    next = contract.storage[last + 9]
                    if !next:
                        next = start

                    # Save data from slot 0 to `used` - 1 for last price
                    i = 0
                    while i < used - 1:
                        contract.storage[next + i] = msg.data[i + 1]
                        i = i + 1

                    # Save market id at slot 6
                    contract.storage[next + 6] = market

                    # Set block number
                    contract.storage[next + 7] = block.number

                    # Set previous and next pointers
                    contract.storage[next + 8] = last
                    contract.storage[next + 9] = next + slots

                    # # Find next available slot
                    # nextavailable = next + slots
                    # while contract.storage[nextavailable]:
                    #     nextavailable = nextavailable + slots
                    # contract.storage[next + 9] = nextavailable

                    # Set new last pointer
                    contract.storage[19] = next

                    # Increment total
                    contract.storage[2] = total + 1

                    # Set new market as last market ID
                    contract.storage[3] = market

                    return(market)

        #
        # Market operations
        #
        elif msg.datasize == 2:
            #
            # Set last price
            #
            if msg.data[0]:
                if msg.sender == exchange:
                    marketid = msg.data[0] - 1
                    contract.storage[marketid * slots + start + 5] = msg.data[1]
                    return(1)

            #
            # Remove market
            #
            if msg.data[0] == 0:
                if msg.sender == exchange:
                    if msg.data[1] > 100: # Do not allow removing first market (ETX)

                        # Get previous and next pointers
                        previous = contract.storage[msg.data[1] + 8]
                        next = contract.storage[msg.data[1] + 9]

                        #
                        # Update pointers
                        #
                        if msg.data[1] != start and msg.data[1] != last:
                            # Market is neither the start or the last
                            # Update previous market's next to next market
                            contract.storage[previous + 9] = next
                            # Update next market's previous to previous market
                            contract.storage[next + 8] = previous
                        elif msg.data[1] == start and msg.data[1] != last:
                            # Market is the start market, but not the last
                            # Update start to next market
                            contract.storage[18] = next
                            # Update next market's previous to itself
                            contract.storage[next + 8] = next
                        elif msg.data[1] != start and msg.data[1] == last:
                            # Market is the last market, but not the start
                            # Update previous markets's next to this market
                            contract.storage[previous + 9] = msg.data[1]
                            # Update last to this market's previous
                            contract.storage[19] = previous
                        else:
                            # Only one market in list as start and last
                            # Update start to this market
                            contract.storage[18] = msg.data[1]
                            # Update last to this market
                            contract.storage[19] = msg.data[1]

                        # Decrement total
                        contract.storage[2] = total - 1

                        # Clear storage
                        c = 0
                        while c < slots:
                            contract.storage[msg.data[1] + c] = 0
                            c = c + 1

                        return(1)

        return(0)

    elif msg.sender == exchange:

        # NameReg
        call(msg.data[1], msg.data[2])

        # Set contract parent and owner
        contract.storage[14] = msg.data[0] # Set c3D parent
        contract.storage[15] = msg.data[0] # Set reference to exchange //define msg.data[0]=EX
        contract.storage[18] = 100 # Set our linked list start
        contract.storage[19] = 100 # Set our start as last pointer

        # Set contract as active
        contract.storage[1] = 1 // "Initializing storage for sender %s" % msg.data[0]

        return(1)
